import { Directive, Input } from '@angular/core';
import { YaMapsAPIWrapper } from '../ya-maps-api-wrapper';
import { ObjectManagerManager } from '../services/managers/objectManager-manager';
var markerId = 0;
// tslint:disable-next-line:directive-class-suffix
var YaObjectManager = /** @class */ (function () {
    function YaObjectManager(_manager) {
        this._manager = _manager;
        this.clusterize = false;
        this.clasterPreset = 'islands#blueIcon';
        this.objectPreset = 'islands#blueClusterIcons';
        this.gridSize = 0;
        this._observableSubscriptions = [];
        this._addedToManger = false;
        this._id = (markerId++).toString();
    }
    YaObjectManager.prototype.ngOnChanges = function (changes) {
        if (!this._addedToManger) {
            this._manager.add(this);
            this._addedToManger = true;
            return;
        }
        if (changes['selectedObjectId']) {
            this._manager.navigateToGeoObject(this, this.selectedObjectId);
        }
        if (changes['filter']) {
            console.log('filter ' + this.filter);
            this._manager.setFilter(this, this.filter);
        }
    };
    YaObjectManager.decorators = [
        { type: Directive, args: [{
                    selector: 'ya-object-manager',
                    providers: [
                        YaMapsAPIWrapper
                    ]
                },] },
    ];
    /** @nocollapse */
    YaObjectManager.ctorParameters = function () { return [
        { type: ObjectManagerManager, },
    ]; };
    YaObjectManager.propDecorators = {
        'clusterize': [{ type: Input },],
        'datasource': [{ type: Input },],
        'clasterPreset': [{ type: Input },],
        'objectPreset': [{ type: Input },],
        'gridSize': [{ type: Input },],
        'selectedObjectId': [{ type: Input },],
        'filter': [{ type: Input },],
    };
    return YaObjectManager;
}());
export { YaObjectManager };
//# sourceMappingURL=objectManager.js.map