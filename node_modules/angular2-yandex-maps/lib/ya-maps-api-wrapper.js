import { Injectable, NgZone } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { YaMapsAPILoader } from './services/ya-maps-loader';
import { DocumentRef } from './utils/browser-globals';
var YaMapsAPIWrapper = /** @class */ (function () {
    function YaMapsAPIWrapper(_loader, _zone, d) {
        var _this = this;
        this._loader = _loader;
        this._zone = _zone;
        this._documentRef = d;
        this._map = new Promise(function (resolve) {
            _this._mapResolver = resolve;
        });
    }
    YaMapsAPIWrapper.prototype.createMap = function (el, mapOptions) {
        var _this = this;
        var res = this._loader.load().then(function () {
            var create = function () { return setTimeout(function () {
                if (ymaps.Map) {
                    var map = new ymaps.Map(el, mapOptions);
                    _this._mapResolver(map);
                }
                else {
                    create();
                }
            }, 100); };
            create();
        }).catch(function (e) { return console.log(e); });
        return res;
    };
    YaMapsAPIWrapper.prototype.setCenter = function (latitude, longitude) {
        this._map.then(function (map) {
            map.setCenter([latitude, longitude]);
        });
    };
    YaMapsAPIWrapper.prototype.getCenter = function () {
        return this._map.then(function (map) {
            return map.getCenter();
        });
    };
    YaMapsAPIWrapper.prototype.panTo = function (points, options) {
        this._map.then(function (map) {
            map.panTo(points, options);
        });
    };
    YaMapsAPIWrapper.prototype.subscribeToMapEvent = function (eventName) {
        var _this = this;
        return Observable.create(function (observer) {
            _this._map.then(function (m) {
                m.events.add(eventName, function (arg) { _this._zone.run(function () { return observer.next(arg); }); });
            });
        });
    };
    YaMapsAPIWrapper.prototype.createMarker = function (marker) {
        return this._map.then(function (map) {
            var m = new ymaps.Placemark([marker.latitude, marker.longitude], {
                balloonContentHeader: marker.balloonContentHeader,
                balloonContentBody: marker.balloonContentBody,
                balloonContentFooter: marker.balloonContentFooter,
                iconContent: marker.iconContent
            }, {
                draggable: marker.draggable,
                preset: marker.preset,
                iconLayout: marker.iconLayout,
                iconImageHref: marker.iconImageHref,
                iconImageSize: marker.iconImageSize,
                iconImageOffset: marker.iconImageOffset
            });
            map.geoObjects.add(m);
            return m;
        });
    };
    YaMapsAPIWrapper.prototype.removeGeo = function (overlay) {
        this._map.then(function (map) {
            map.geoObjects.remove(overlay);
        });
    };
    YaMapsAPIWrapper.prototype.createClaster = function (claster) {
        return this._map.then(function (map) {
            if (claster.markers.length === 0) {
                return;
            }
            var myGeoObjects;
            myGeoObjects = new Array();
            claster.markers.forEach(function (x) {
                var point = new ymaps.GeoObject({
                    geometry: { type: x.type, coordinates: [x.lat, x.lng] }
                });
                myGeoObjects.push(point);
            });
            var clusterer = new ymaps.Clusterer({});
            clusterer.add(myGeoObjects);
            map.geoObjects.add(clusterer);
            return clusterer;
        });
    };
    YaMapsAPIWrapper.prototype.createObjectManager = function (objectManager) {
        return this._map.then(function (map) {
            if (objectManager.datasource.length === 0) {
                return;
            }
            var nativeObjectManager = new ymaps.ObjectManager({
                clusterize: objectManager.clusterize,
                gridSize: objectManager.gridSize
            });
            nativeObjectManager.add(objectManager.datasource);
            nativeObjectManager.objects.options.set('preset', objectManager.objectPreset);
            nativeObjectManager.clusters.options.set('preset', objectManager.clasterPreset);
            map.geoObjects.add(nativeObjectManager);
            return nativeObjectManager;
        });
    };
    YaMapsAPIWrapper.prototype.navigateToGeoObject = function (objectManager, id) {
        var obj = objectManager.objects.getById(id);
        if (obj) {
            this.setCenter(obj.geometry.coordinates[0], obj.geometry.coordinates[1]);
            objectManager.objects.balloon.open(id);
        }
    };
    YaMapsAPIWrapper.prototype.checkYaSciptLoaded = function () {
        return this._documentRef.getNativeDocument().getElementById('YaScript');
    };
    YaMapsAPIWrapper.prototype.objectManagerSetFilter = function (objectManager, filter) {
        objectManager.setFilter(filter);
    };
    YaMapsAPIWrapper.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    YaMapsAPIWrapper.ctorParameters = function () { return [
        { type: YaMapsAPILoader, },
        { type: NgZone, },
        { type: DocumentRef, },
    ]; };
    return YaMapsAPIWrapper;
}());
export { YaMapsAPIWrapper };
//# sourceMappingURL=ya-maps-api-wrapper.js.map