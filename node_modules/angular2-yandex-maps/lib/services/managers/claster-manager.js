import { Injectable, NgZone } from '@angular/core';
import { YaMapsAPIWrapper } from '../../ya-maps-api-wrapper';
var ClasterManager = /** @class */ (function () {
    function ClasterManager(_mapsWrapper, _zone) {
        this._mapsWrapper = _mapsWrapper;
        this._zone = _zone;
        this._clasters = new Map();
    }
    ClasterManager.prototype.addClaster = function (claster) {
        var clasterPromise = this._mapsWrapper.createClaster(claster);
        this._clasters.set(claster, clasterPromise);
    };
    /* getNativeMarker(marker: YaMarker): Promise<Marker> {
       return this._markers.get(marker);
     }
  
     createEventObservable<T>(eventName: string, marker: YaMarker): Observable<T> {
       return Observable.create((observer: Observer<T>) => {
         this._markers.get(marker).then((m: Marker) => {
           m.events.add(eventName, (e: T) => this._zone.run(() => observer.next(e)));
         });
       });
     }
     */
    ClasterManager.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ClasterManager.ctorParameters = function () { return [
        { type: YaMapsAPIWrapper, },
        { type: NgZone, },
    ]; };
    return ClasterManager;
}());
export { ClasterManager };
//# sourceMappingURL=claster-manager.js.map